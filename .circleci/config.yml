version: 2.1

# Allow dynamic configuration for the project
setup: true

# the path-filtering orb is required to continue a pipeline based on
# the path of an updated fileset
orbs:
  path-filtering: circleci/path-filtering@0.1.1

defaults: &defaults
  working_directory: ~/app
  docker:
    - image: cimg/node:22.16

jobs:
  grc-stamp_build_image:
    <<: *defaults
    docker:
      - image: docker:24.0.0-git
    steps:
      - checkout
      - run:
          name: Get the recent changes
          command: git pull origin master
      - setup_remote_docker:
          version: 24.0.0
      - run:
          name: Install dependencies
          command: apk add --no-cache jq
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            cd ~/app/packages/grc-stamp && docker build --cache-from=app -t app -f Dockerfile.prod .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            cd ~/app/packages/grc-stamp && docker save -o /caches/app.tar app
      - deploy:
          name: Push application Docker image
          command: |
            cd ~/app/packages/grc-stamp
            docker login ghcr.io -u gridcat -p${CR_PAT}
            docker tag app "ghcr.io/gridcat/$(jq -r '.name' package.json):$(jq -r '.version' package.json)"
            docker push "ghcr.io/gridcat/$(jq -r '.name' package.json):$(jq -r '.version' package.json)"
            docker tag app "ghcr.io/gridcat/$(jq -r '.name' package.json):latest"
            docker push "ghcr.io/gridcat/$(jq -r '.name' package.json):latest"

  grc-stamp-frontend_build_image:
    <<: *defaults
    docker:
      - image: docker:24.0.0-git
    steps:
      - checkout
      - run:
          name: Get the recent changes
          command: git pull origin master
      - setup_remote_docker:
          version: 24.0.0
      - run:
          name: Install dependencies
          command: apk add --no-cache jq
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            cd ~/app/packages/grc-stamp-frontend && docker build --cache-from=app -t app .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            cd ~/app/packages/grc-stamp-frontend && docker save -o /caches/app.tar app
      - deploy:
          name: Push application Docker image
          command: |
            cd ~/app/packages/grc-stamp-frontend
            docker login ghcr.io -u gridcat -p${CR_PAT}
            docker tag app "ghcr.io/gridcat/$(jq -r '.name' package.json):$(jq -r '.version' package.json)"
            docker push "ghcr.io/gridcat/$(jq -r '.name' package.json):$(jq -r '.version' package.json)"
            docker tag app "ghcr.io/gridcat/$(jq -r '.name' package.json):latest"
            docker push "ghcr.io/gridcat/$(jq -r '.name' package.json):latest"

workflows:
  # Unconditional jobs, firing when new tag is released
  grc-stamp_deploy-tag:
    jobs:
      - grc-stamp_build_image:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^grc-stamp-v.*/

  # Unconditional jobs, firing when new tag is released
  grc-stamp-frontend_deploy-tag:
    jobs:
      - grc-stamp-frontend_build_image:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^grc-stamp-fronted-v.*/

  # the always-run workflow is always triggered, regardless of the pipeline parameters.
  always-run:
    jobs:
      # the path-filtering/filter job determines which pipeline
      # parameters to update.
      - path-filtering/filter:
          name: check-updated-files
          # 3-column, whitespace-delimited mapping. One mapping per
          # line:
          # <regex path-to-test> <parameter-to-set> <value-of-pipeline-parameter>
          mapping: |
            packages/grc-stamp/.* run-build-grc-stamp true
            packages/grc-stamp-frontend/.* run-build-grc-stamp-frontend true
          base-revision: master
          # this is the path of the configuration we should trigger once
          # path filtering and pipeline parameter value updates are
          # complete. In this case, we are using the parent dynamic
          # configuration itself.
          config-path: .circleci/continue_config.yml
